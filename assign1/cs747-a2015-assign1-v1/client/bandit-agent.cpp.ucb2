#include <iostream>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netdb.h>
#include <unistd.h>
#include <stdio.h>
#include <stdlib.h>
#include <errno.h>
#include <cmath>
#include <math.h>
#include <vector>
#define MAXHOSTNAME 256

using namespace std;



void options(){

  cout << "Usage:\n";
  cout << "bandit-agent\n"; 
  cout << "\t[--numArms numArms]\n";
  cout << "\t[--randomSeed randomSeed]\n";
  cout << "\t[--horizon horizon]\n";
  cout << "\t[--hostname hostname]\n";
  cout << "\t[--port port]\n";
}


/*
  Read command line arguments, and set the ones that are passed (the others remain default.)
*/
bool setRunParameters(int argc, char *argv[], int &numArms, int &randomSeed, unsigned long int &horizon, string &hostname, int &port){

  int ctr = 1;
  while(ctr < argc){

    //cout << string(argv[ctr]) << "\n";

    if(string(argv[ctr]) == "--help"){
      return false;//This should print options and exit.
    }
    else if(string(argv[ctr]) == "--numArms"){
      if(ctr == (argc - 1)){
	return false;
      }
      numArms = atoi(string(argv[ctr + 1]).c_str());
      ctr++;
    }
    else if(string(argv[ctr]) == "--randomSeed"){
      if(ctr == (argc - 1)){
	return false;
      }
      randomSeed = atoi(string(argv[ctr + 1]).c_str());
      ctr++;
    }
    else if(string(argv[ctr]) == "--horizon"){
      if(ctr == (argc - 1)){
	return false;
      }
      horizon = atoi(string(argv[ctr + 1]).c_str());
      ctr++;
    }
    else if(string(argv[ctr]) == "--hostname"){
      if(ctr == (argc - 1)){
	return false;
      }
      hostname = string(argv[ctr + 1]);
      ctr++;
    }
    else if(string(argv[ctr]) == "--port"){
      if(ctr == (argc - 1)){
	return false;
      }
      port = atoi(string(argv[ctr + 1]).c_str());
      ctr++;
    }
    else{
      return false;
    }

    ctr++;
  }

  return true;
}


int ucb2(int numArms, std::vector<float> empReward, std::vector<int> armEpochCount,int currentNumPlays,float alpha){

    float temp =0;
    int returnArm = 0;
    float T_r = 0;
    T_r = std::ceil(pow(1+alpha,armEpochCount[0]));
    temp = empReward[0] + sqrt((1+alpha)*log(exp(1)*currentNumPlays/T_r)/(2*T_r));
    for(int i=1;i<numArms;i++){

      T_r = std::ceil(pow(1+alpha,armEpochCount[i]));
      if(temp < empReward[i] + sqrt((1+alpha)*log(exp(1)*currentNumPlays/T_r)/(2*T_r))){
        temp = empReward[i] + sqrt((1+alpha)*log(exp(1)*currentNumPlays/T_r)/(2*T_r));
        returnArm = i;
      }

    }
    return returnArm;
}



int main(int argc, char *argv[]){
  
  // Run Parameter defaults.
  int numArms = 5;
  int randomSeed = time(0);
  unsigned long int horizon = 1000;
  string hostname = "localhost";

  int port = 5000;

  //Set from command line, if any.
  if(!(setRunParameters(argc, argv, numArms, randomSeed, horizon, hostname, port))){
    //Error parsing command line.
    options();
    return 1;
  }

  struct sockaddr_in remoteSocketInfo;
  struct hostent *hPtr;
  int socketHandle;

  bzero(&remoteSocketInfo, sizeof(sockaddr_in));
  
  if((hPtr = gethostbyname((char*)(hostname.c_str()))) == NULL){
    cerr << "System DNS name resolution not configured properly." << "\n";
    cerr << "Error number: " << ECONNREFUSED << "\n";
    exit(EXIT_FAILURE);
  }

  if((socketHandle = socket(AF_INET, SOCK_STREAM, 0)) < 0){
    close(socketHandle);
    exit(EXIT_FAILURE);
  }

  memcpy((char *)&remoteSocketInfo.sin_addr, hPtr->h_addr, hPtr->h_length);
  remoteSocketInfo.sin_family = AF_INET;
  remoteSocketInfo.sin_port = htons((u_short)port);

  if(connect(socketHandle, (struct sockaddr *)&remoteSocketInfo, sizeof(sockaddr_in)) < 0){
    close(socketHandle);
    exit(EXIT_FAILURE);
  }


  char sendBuf[256];
  char recvBuf[256];

  int alpha = 0.01;
  int armToPull = 0;
  int currentNumPlays = 0;
  std::vector<float> empReward(numArms);
  std::vector<int> armEpochCount(numArms);
  std::vector<int> armSelectionCount(numArms);

  float reward = 0;
  for(int i=0;i<numArms;i++){
    armToPull = i;
    sprintf(sendBuf, "%d", armToPull);
    cout << "Sending action " << armToPull << ".\n";
    if(send(socketHandle, sendBuf, strlen(sendBuf)+1, MSG_NOSIGNAL) >= 0){
      recv(socketHandle, recvBuf, 256, 0);
      sscanf(recvBuf, "%f", &reward);
      cout << "Received reward " << reward << ".\n";
      empReward[armToPull] = reward;
      armEpochCount[armToPull] = 1;
      armSelectionCount[armToPull] = 1;
      currentNumPlays++;
    }
  }

  armToPull = ucb2(numArms, empReward,armEpochCount,currentNumPlays,alpha);
  sprintf(sendBuf, "%d", armToPull);
  cout << "Sending action " << armToPull << ".\n";

  while(send(socketHandle, sendBuf, strlen(sendBuf)+1, MSG_NOSIGNAL) >= 0){

    recv(socketHandle, recvBuf, 256, 0);
    sscanf(recvBuf, "%f", &reward);
    cout << "Received reward " << reward << ".\n";
    armSelectionCount[armToPull] += 1;
    armEpochCount[armToPull] += 1;
    empReward[armToPull] = (empReward[armToPull]*(armSelectionCount[armToPull]-1)+reward)/armSelectionCount[armToPull];


    float T_r1=0;
    float T_r = 0;
    T_r1 = std::ceil(pow(1+alpha,armEpochCount[armToPull]));
    T_r = std::ceil(pow(1+alpha,armEpochCount[armToPull]-1));

    //running for the epoch
    for(int i=0;i<T_r1-T_r;i++){
      sprintf(sendBuf, "%d", armToPull);
      cout << "Sending action " << armToPull << ".\n";
      if(send(socketHandle, sendBuf, strlen(sendBuf)+1, MSG_NOSIGNAL) >= 0){       
        
        recv(socketHandle, recvBuf, 256, 0);
        sscanf(recvBuf, "%f", &reward);
        cout << "Received reward " << reward << ".\n";
        
        armSelectionCount[armToPull] += 1;
        empReward[armToPull] = (empReward[armToPull]*(armSelectionCount[armToPull]-1)+reward)/armSelectionCount[armToPull];
        currentNumPlays++;
      }

    }
    
    armToPull = ucb2(numArms, empReward,armEpochCount,currentNumPlays,alpha);
    sprintf(sendBuf, "%d", armToPull);
    cout << "Sending action " << armToPull << ".\n";
    currentNumPlays++;
  }

  close(socketHandle);
  cout << "Terminating.\n";

}
          
